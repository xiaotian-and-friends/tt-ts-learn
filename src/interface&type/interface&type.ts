// ——————————————————————————————————————————————————————————————————————————————
// 在 TypeScript 中，interface 和 type 都用于定义类型，但它们在功能、使用场景和一些细节上有显著区别。
// ——————————————————————————————————————————————————————————————————————————————
// 相同点
// ------------------------------------------------------------------------------
// 基础类型：可以用来描述基本类型的别名。
// 定义对象类型：两者都可以用来定义对象的结构。
// 可以扩展：两者都可以进行类型扩展，但方式不同。
// ——————————————————————————————————————————————————————————————————————————————
// 不同点
// ------------------------------------------------------------------------------
// 1.扩展性
// ------------------------------------------------------------------------------
// Interface：
// 继承：接口可以通过 extends 关键字继承一个或多个接口。
// 声明合并:同名的接口会自动合并。
// 例子如下:两个 interfaceA 合并了,interfaceB 使用 extends 关键字继承了 interfaceA
interface interfaceA { a:string; b:number; }
interface interfaceA  { c:boolean; }
interface interfaceB extends interfaceA { [k:string]:any }

const interface_B_test:interfaceB = { a:'1',b:1,c:false,any_key:'1' }
// ------------------------------------------------------------------------------
// type:
// 不可重名：同名的类型别名会导致编译错误。
// 交叉类型：类型别名可以使用 & 操作符进行交叉合并。
// 例子如下: typeB 使用 & 合并了 typeA, interfaceB 使用 extends 关键字继承了 interfaceA
type typeA = { a:string; b:number; };
type typeB = typeA & { c:string; d:number; }

let type_B_test:typeB = { a:'1',b:1,c:'2',d:2 }
// ------------------------------------------------------------------------------
// 2.用途广泛性
// ------------------------------------------------------------------------------
// Interface：主要用于定义对象类型，适合描述类的结构。
interface interface_Person {
    name: string;
    age: number;
}
// ------------------------------------------------------------------------------
// Type：可以定义任何类型，包括对象类型、联合类型、交叉类型、元组、基本类型等。
type Name = string;
type type_Person = {
    name: string;
    age: number;
};
type StringOrNumber = string | number;
type PersonWithID = type_Person & { id: number };
// ------------------------------------------------------------------------------
// 3. 类型声明
// ------------------------------------------------------------------------------
// Interface：只能定义对象类型。
// Type：可以定义对象类型、基本类型别名、联合类型、交叉类型、元组等。
// ------------------------------------------------------------------------------
// 4. 接口和类 (比较重要)
// ------------------------------------------------------------------------------
// Interface：可以被类实现（implements），强制类遵循接口的结构。
// 强制类遵循接口的结构。(必须包含被 implements 的 Interface 中所有属性类型)
interface Interface_class_person {
    name:string,
    age:number,
    sex:string,
    handler(): void,
}
class Inter_Person implements Interface_class_person {
    declare public name;
    declare public age;
    declare public sex;
    constructor({ name = '', age = 18, sex = '男'}) {
        this.name = name
        this.age = age
        this.sex = sex
    }
    handler() {
        console.log(`我是${this.name},${this.sex},今年${this.age}`)
    }
}
// ------------------------------------------------------------------------------
// Type：不能直接被类实现，但可以用作类的类型注解。
// 也就是说,用type定义类,更像是注释
type Type_class_person = {
    name:string,
    age:number,
    sex:string,
    handler(): void,
}
class Type_Person implements Type_class_person {
    declare public name;
    declare public age;
    declare public sex;
    constructor({ name = '', age = 18, sex = '男'}) {
        this.name = name
        this.age = age
        this.sex = sex
    }
    handler() {
        console.log(`我是${this.name},${this.sex},今年${this.age}`)
    }
}
// ------------------------------------------------------------------------------
// 何时使用 interface
// ------------------------------------------------------------------------------
// 定义对象类型：首选 interface。
// 需要扩展或继承：使用 interface，因为它支持继承和声明合并。
// 面向对象编程：用接口定义类的契约，并让类实现这些接口。
// 声明合并：如果需要在不同地方对同一个接口进行扩展，使用 interface。
// ------------------------------------------------------------------------------
// 何时使用 type
// ------------------------------------------------------------------------------
// 定义复杂类型：如联合类型、交叉类型、元组等，使用 type。
// 基本类型别名：使用 type，例如 type ID = string | number。
// 函数类型：可以使用 type 简洁地定义函数类型别名。
// 组合多个类型：使用 type，可以通过交叉类型 & 组合多个类型。
// ——————————————————————————————————————————————————————————————————————————————
// 总结
// ------------------------------------------------------------------------------
// Interface：
// ------------------------------------------------------------------------------
// 更适合对象类型和类的契约。
// 支持继承和声明合并。
// 主要用于定义对象的结构。
// ------------------------------------------------------------------------------
// Type：
// ------------------------------------------------------------------------------
// 更灵活，适用于任何类型（基本类型、联合类型、交叉类型、元组等）。
// 不能声明合并。
// 适合定义复杂类型和类型别名。
// 在实际开发中，通常推荐优先使用 interface 来定义对象类型和类契约，而使用 type 来定义更复杂和灵活的类型结构。
// ——————————————————————————————————————————————————————————————————————————————
